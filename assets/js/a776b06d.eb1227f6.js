"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6366],{3905:(e,r,t)=>{t.r(r),t.d(r,{MDXContext:()=>l,MDXProvider:()=>d,mdx:()=>m,useMDXComponents:()=>u,withMDXComponents:()=>p});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(){return a=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},a.apply(this,arguments)}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),p=function(e){return function(r){var t=u(r.components);return n.createElement(e,a({},r,{components:t}))}},u=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},d=function(e){var r=u(e.components);return n.createElement(l.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),d=o,h=p["".concat(i,".").concat(d)]||p[d]||f[d]||a;return t?n.createElement(h,c(c({ref:r},l),{},{components:t})):n.createElement(h,c({ref:r},l))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=h;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},1337:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>l,toc:()=>u});var n=t(83117),o=t(80102),a=(t(67294),t(3905)),i=["components"],c={id:"power-search",title:"Power Search",sidebar_label:"Power Search"},s=void 0,l={unversionedId:"extending/power-search",id:"extending/power-search",title:"Power Search",description:"By default, your table has a power search bar. It allows to search through the entire row as a serialized string or through individual columns. Based on the column type, power search provides different search operators for columns.",source:"@site/../docs/extending/power-search.mdx",sourceDirName:"extending",slug:"/extending/power-search",permalink:"/docs/extending/power-search",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/power-search.mdx",tags:[],version:"current",frontMatter:{id:"power-search",title:"Power Search",sidebar_label:"Power Search"},sidebar:"main",previous:{title:"Desktop Plugin API",permalink:"/docs/extending/flipper-plugin"},next:{title:"Styling Components",permalink:"/docs/extending/styling-components"}},p={},u=[],d={toc:u};function f(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.mdx)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"By default, your ",(0,a.mdx)("a",{parentName:"p",href:"/docs/tutorial/js-table"},"table")," has a power search bar. It allows to search through the entire row as a serialized string or through individual columns. Based on the column type, power search provides different search operators for columns.\nFor instance, for string values it can check if a string contains a substring or even matches some other string exactly. At the same time, for dates Flipper can filter out records after or before a certain date.\nSince Flipper does not have a way of identifying the column type in advance, it always assumes that every column is a string. If you want you can tell Flipper how to handle a column and what power search operators should be available."),(0,a.mdx)("p",null,"You can see a live example of how you can provide the power search config ",(0,a.mdx)("a",{parentName:"p",href:"https://fburl.com/code/rrxj86e5"},"here"),". "),(0,a.mdx)("p",null,"You can find the complete list of supported operators ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/main/desktop/flipper-plugin/src/ui/data-table/DataTableDefaultPowerSearchOperators.tsx"},"here"),"."))}f.isMDXComponent=!0}}]);